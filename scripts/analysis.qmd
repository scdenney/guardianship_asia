---
title: "guardianship asia"
format: html
editor: visual
---

## Overview

This file analyzes support for guardianship democracy in six East and Southeast Asian democracies (Japan, the Philippines, South Korea, Taiwan, Mongolia, and Indonesia), using World Values Survey (WVS) and Varitaies of Democracy (V-dem) data. It includes five main sections:

-   **System Support**: Measures weighted support for four regime types (democracy, rule by experts, military rule, strong leader) across countries and time, highlighting liberal democracies. `@fig-wvs-support`
-   **V-Dem (Electoral)**: Visualizes changes in the V-Dem Electoral Democracy Index (v2x_polyarchy) from 1945 to 2020 for the five focal countries. `@fig-vdem-plot`
-   **Guardianship Support**: Calculates and plots co-endorsement of democracy with each elite-led alternative (Dahlian, military, strongman) to capture guardianship democracy variants. `@fig-guardianship`
-   **Generational Analysis**: Classifies respondents into political generations based on democratic transitions and examines age- and generation-based differences in regime support. `@fig-gen-plot`
-   **Emancipative values**: Analyzes political values using the Emancipative Values Index (EVI) for democratic generations across cases. `@fig-gen-eman-plot`

All plots use post-stratification weights and highlight the six focal cases with distinct colors. Figures are saved to the `figures/` folder for integration into the manuscript.

## Load libraries and data

```{r}

library(dplyr)
library(ggplot2)
library(scales)
library(stringr)
library(vdemdata)
library(tidyr)
library(ggthemes)
library(forcats)

# Load WVS data and tidy
wvsdf <- `WVS_Time_Series_1981-2022_rds_v5_0` %>% haven::zap_labels()


```

## System support

```{r}

#| echo: false

# Recode binary evaluations for "very good" or "fairly good" (1/2)
# E114 = Strong Leader
# E115 = Rule by Experts
# E116 = Military Rule
# E117 = Democracy

binary_cols <- c("E114", "E115", "E116", "E117")
weight_col <- "S017"

wvs_eval <- wvsdf %>%
  mutate(across(all_of(binary_cols), ~ ifelse(. %in% c(1, 2), 1, 0)))

# Add V-Dem regime classification
latest_year <- max(vdem$year, na.rm = TRUE)
vdem_classification <- vdem %>%
  filter(year == latest_year) %>%
  select(COUNTRY_ALPHA = country_text_id, v2x_regime) %>%
  mutate(regime_category = if_else(v2x_regime == 3, "Liberal Democracy", "Other"))

wvs_eval <- wvs_eval %>%
  left_join(vdem_classification, by = "COUNTRY_ALPHA")

# Recode and reshape manually
wvs_long <- bind_rows(
  lapply(binary_cols, function(var) {
    wvs_eval %>%
      filter(!is.na(S020), !is.na(.data[[var]])) %>%
      transmute(
        COUNTRY_ALPHA,
        S020,
        Variable = var,
        Response = ifelse(.data[[var]] %in% c(1, 2), 1, 0),
        Weight = .data[[weight_col]]
      )
  })
)

# Calculate proportions and CIs
proportions <- wvs_long %>%
  group_by(COUNTRY_ALPHA, S020, Variable) %>%
  summarise(
    Proportion = weighted.mean(Response, w = Weight, na.rm = TRUE),
    n = sum(!is.na(Response)),
    se = sqrt(Proportion * (1 - Proportion) / n),
    lower = pmax(Proportion - 1.96 * se, 0),
    upper = pmin(Proportion + 1.96 * se, 1),
    .groups = "drop"
  ) %>%
  filter(Proportion > 0) %>%
  mutate(
    Variable_Label = recode(
      Variable,
      E114 = "Strong Leader",
      E115 = "Experts Rule",
      E116 = "Army Rule",
      E117 = "Democracy Good"
    ),
    Variable_Label = factor(
      Variable_Label,
      levels = c("Democracy Good", "Experts Rule", "Army Rule", "Strong Leader")
    )
  )

# Define groupings and color mappings
highlight_colors <- c(
  "Japan"       = "#f3722c",
  "Philippines" = "#ffca3a",
  "South Korea" = "#e63946",
  "Taiwan"      = "#457b9d",
  "Mongolia"    = "#2a9d8f",
  "Indonesia"   = "#f4a261"
)
highlighted_order <- names(highlight_colors)

# Add group_type
highlight_map <- wvs_eval %>%
  select(COUNTRY_ALPHA, regime_category) %>%
  distinct()

proportions <- proportions %>%
  left_join(highlight_map, by = "COUNTRY_ALPHA") %>%
  mutate(
    group_type = case_when(
      COUNTRY_ALPHA == "KOR" ~ "South Korea",
      COUNTRY_ALPHA == "TWN" ~ "Taiwan",
      COUNTRY_ALPHA == "IDN" ~ "Indonesia",
      COUNTRY_ALPHA == "MNG" ~ "Mongolia",
      COUNTRY_ALPHA == "PHL" ~ "Philippines",
      COUNTRY_ALPHA == "JPN" ~ "Japan",
      regime_category == "Liberal Democracy" ~ "Liberal Democracy",
      TRUE ~ "Other"
    )
  )

# Extract CI data for highlighted countries only
proportions_ci_filtered <- proportions %>%
  filter(group_type %in% highlighted_order) %>%
  mutate(
    group_type = factor(group_type, levels = highlighted_order),
    Variable_Label = factor(Variable_Label, levels = c("Democracy Good", "Experts Rule", "Army Rule", "Strong Leader"))
  )

# Factor full group type for plotting (to include LD/Other in background)
all_group_levels <- c(highlighted_order, "Liberal Democracy", "Other")
proportions$group_type <- factor(proportions$group_type, levels = all_group_levels)

# Plot
wvs_ea_all <- ggplot() +
  # Background lines (LD + Other)
  geom_line(
    data = proportions %>% filter(group_type == "Liberal Democracy"),
    aes(x = S020, y = Proportion, group = interaction(COUNTRY_ALPHA, Variable_Label)),
    color = "#64a3cb", size = 0.8, alpha = 0.6, show.legend = FALSE
  ) +
  geom_line(
    data = proportions %>% filter(group_type == "Other"),
    aes(x = S020, y = Proportion, group = interaction(COUNTRY_ALPHA, Variable_Label)),
    color = "lightgrey", size = 0.8, alpha = 0.3, show.legend = FALSE
  ) +
  # Confidence bands for highlighted countries
  geom_ribbon(
    data = proportions_ci_filtered,
    aes(x = S020, ymin = lower, ymax = upper, fill = group_type, group = interaction(COUNTRY_ALPHA, Variable_Label)),
    alpha = 0.25, inherit.aes = FALSE
  ) +
  # Highlighted country lines and points
  geom_line(
    data = proportions %>% filter(group_type %in% highlighted_order),
    aes(x = S020, y = Proportion, color = group_type, group = interaction(COUNTRY_ALPHA, Variable_Label)),
    size = 1
  ) +
  geom_point(
    data = proportions %>% filter(group_type %in% highlighted_order),
    aes(x = S020, y = Proportion, color = group_type),
    size = 2
  ) +
  # Color and fill scales
  scale_color_manual(values = highlight_colors, breaks = highlighted_order) +
  scale_fill_manual(values = highlight_colors, guide = "none") +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Survey Year", y = "Proportion (%)") +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  ) +
  facet_wrap(~Variable_Label)


#| label: fig-wvs-support
ggsave("figures/wvs_ea_all.pdf", plot = wvs_ea_all, device = "pdf", width = 10, height = 7, dpi = 300)


```

## V-dem (electoral)

```{r}


# Prepare V-Dem subset and relabel countries directly from country_name
vdem_cases <- vdem %>%
  filter(country_name %in% c("South Korea", "Taiwan", "Mongolia", "Indonesia", "Philippines", "Japan"),
         year >= 1945, year <= 2020) %>%
  select(COUNTRY = country_name, year, v2x_polyarchy) %>%
  mutate(COUNTRY = factor(COUNTRY, levels = c("Japan", "Philippines", "South Korea", "Taiwan", "Mongolia", "Indonesia")))

# Define highlight colors by country name in correct order
highlight_colors <- c(
  "Japan"       = "#f3722c",
  "Philippines" = "#ffca3a",
  "South Korea" = "#e63946",
  "Taiwan"      = "#457b9d",
  "Mongolia"    = "#2a9d8f",
  "Indonesia"   = "#f4a261"
)

# Generate electoral democracy plot
electoral_plot <- ggplot(vdem_cases, aes(x = year, y = v2x_polyarchy, color = COUNTRY)) +
  geom_line(size = 1.2) +
  scale_color_manual(values = highlight_colors) +
  scale_y_continuous(limits = c(0, 1)) +
  scale_x_continuous(breaks = seq(1945, 2020, by = 15)) +
  labs(
    x = "Year",
    y = "Electoral Democracy Index",
    color = ""
  ) +
  theme_light() +
  theme(
    legend.position = "bottom",
    legend.text = element_text(size = 9),
    axis.text.x = element_text(size = 8),
    axis.text.y = element_text(size = 8),
    plot.title = element_text(size = 12, face = "bold"),
    panel.grid.minor = element_blank()
  )

#| label: fig-vdem-plot
ggsave("figures/vdem_electoral_democracy.pdf", electoral_plot, width = 9, height = 5, dpi = 300)


```

## Guardianship support

```{r}

# Recode endorsement pairs
wvs_guardianship <- wvsdf %>%
  filter(S002VS >= 3) %>%
  mutate(
    E114_pair = ifelse(!is.na(E114) & !is.na(E117), ifelse(E114 %in% c(1, 2) & E117 %in% c(1, 2), 1, 0), NA_real_),
    E115_pair = ifelse(!is.na(E115) & !is.na(E117), ifelse(E115 %in% c(1, 2) & E117 %in% c(1, 2), 1, 0), NA_real_),
    E116_pair = ifelse(!is.na(E116) & !is.na(E117), ifelse(E116 %in% c(1, 2) & E117 %in% c(1, 2), 1, 0), NA_real_)
  )

# Calculate proportions with CIs
guardianship <- wvs_guardianship %>%
  group_by(COUNTRY_ALPHA, S020) %>%
  summarise(
    Dahlian_Proportion = weighted.mean(E115_pair, w = S017, na.rm = TRUE),
    Dahlian_se = sqrt(Dahlian_Proportion * (1 - Dahlian_Proportion) / sum(!is.na(E115_pair))),
    
    Strongman_Proportion = weighted.mean(E114_pair, w = S017, na.rm = TRUE),
    Strongman_se = sqrt(Strongman_Proportion * (1 - Strongman_Proportion) / sum(!is.na(E114_pair))),
    
    Military_Proportion = weighted.mean(E116_pair, w = S017, na.rm = TRUE),
    Military_se = sqrt(Military_Proportion * (1 - Military_Proportion) / sum(!is.na(E116_pair))),
    
    .groups = "drop"
  ) %>%
  pivot_longer(
    cols = c(Dahlian_Proportion, Strongman_Proportion, Military_Proportion,
             Dahlian_se, Strongman_se, Military_se),
    names_to = c("Measure", ".value"),
    names_pattern = "(.*)_(Proportion|se)"
  ) %>%
  mutate(
    lower = pmax(Proportion - 1.96 * se, 0),
    upper = pmin(Proportion + 1.96 * se, 1),
    Measure = recode(Measure,
      "Dahlian" = "Dahlian Guardianship",
      "Strongman" = "Strongman Guardianship",
      "Military" = "Military Guardianship"
    ),
    Measure = factor(Measure, levels = c("Dahlian Guardianship", "Military Guardianship", "Strongman Guardianship"))
  ) %>%
  filter(Proportion > 0)

# V-Dem regime classification
vdem_classification <- vdem %>%
  filter(year == max(vdem$year, na.rm = TRUE)) %>%
  select(COUNTRY_ALPHA = country_text_id, v2x_regime) %>%
  mutate(regime_category = if_else(v2x_regime == 3, "Liberal Democracy", "Other"))

# Add group_type to full data
wvs_guardianship <- wvs_guardianship %>%
  left_join(vdem_classification, by = "COUNTRY_ALPHA") %>%
  mutate(
    group_type = case_when(
      COUNTRY_ALPHA == "KOR" ~ "South Korea",
      COUNTRY_ALPHA == "TWN" ~ "Taiwan",
      COUNTRY_ALPHA == "IDN" ~ "Indonesia",
      COUNTRY_ALPHA == "MNG" ~ "Mongolia",
      COUNTRY_ALPHA == "PHL" ~ "Philippines",
      COUNTRY_ALPHA == "JPN" ~ "Japan",
      regime_category == "Liberal Democracy" ~ "Liberal Democracy",
      TRUE ~ "Other"
    )
  )

# Color order and highlighting 
highlight_colors <- c(
  "Japan"       = "#f3722c",
  "Philippines" = "#ffca3a",
  "South Korea" = "#e63946",
  "Taiwan"      = "#355d7f",
  "Mongolia"    = "#2a9d8f",
  "Indonesia"   = "#f4a261"
)
highlight_order <- names(highlight_colors)

wvs_guardianship$group_type <- factor(wvs_guardianship$group_type,
  levels = c(highlight_order, "Liberal Democracy", "Other")
)

# Filter data for ribbon layer
ci_ribbons <- wvs_guardianship %>%
  filter(group_type %in% highlight_order)

# Plot ===
guardianship_types <- ggplot() +
  # Background: LD and Other
  geom_line(
    data = wvs_guardianship %>% filter(group_type == "Liberal Democracy"),
    aes(x = S020, y = Proportion, group = interaction(COUNTRY_ALPHA, Measure)),
    color = "#64a3cb", size = 0.8, alpha = 0.6
  ) +
  geom_line(
    data = wvs_guardianship %>% filter(group_type == "Other"),
    aes(x = S020, y = Proportion, group = interaction(COUNTRY_ALPHA, Measure)),
    color = "lightgrey", size = 0.8, alpha = 0.3
  ) +
  # CI ribbons
  geom_ribbon(
    data = ci_ribbons,
    aes(x = S020, ymin = lower, ymax = upper, fill = group_type,
        group = interaction(COUNTRY_ALPHA, Measure)),
    alpha = 0.25, inherit.aes = FALSE
  ) +
  # Highlighted lines
  geom_line(
    data = wvs_guardianship %>% filter(group_type %in% highlight_order),
    aes(x = S020, y = Proportion, color = group_type,
        group = interaction(COUNTRY_ALPHA, Measure)),
    size = 1
  ) +
  geom_point(
    data = wvs_guardianship %>% filter(group_type %in% highlight_order),
    aes(x = S020, y = Proportion, color = group_type),
    size = 2
  ) +
  # Manual color + fill scales
  scale_color_manual(
    values = highlight_colors,
    breaks = highlight_order
  ) +
  scale_fill_manual(
    values = highlight_colors,
    guide = "none"
  ) +
  scale_y_continuous(labels = scales::percent_format()) +
  labs(x = "Survey Year", y = "Proportion (%)") +
  facet_wrap(~Measure) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    legend.title = element_blank(),
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


#| label: fig-guardianship
ggsave("figures/guardianship_types.pdf", plot = guardianship_types, device = "pdf", width = 10, height = 7, dpi = 300)


```

## Generational analysis

```{r}

# Assign generations
assign_generations <- function(df) {
  df %>%
    mutate(
      Transition_Year = case_when(
        COUNTRY_ALPHA == "KOR" ~ 1987,
        COUNTRY_ALPHA == "TWN" ~ 1991,
        COUNTRY_ALPHA == "MNG" ~ 1992,
        COUNTRY_ALPHA == "IDN" ~ 1998,
        COUNTRY_ALPHA == "PHL" ~ 1986,
        COUNTRY_ALPHA == "JPN" ~ 1956,
        TRUE ~ NA_real_
      ),
      Transition_Age = Transition_Year - X002,
      Generation = case_when(
        Transition_Age >= 26 ~ "Authoritarian",
        Transition_Age >= 18 & Transition_Age <= 25 ~ "Transitional",
        Transition_Age < 18 ~ "Democratic",
        TRUE ~ NA_character_
      )
    )
}

# Age bins
age_breaks <- c(seq(18, 78, by = 5), Inf)
age_labels <- paste0(age_breaks[-length(age_breaks)], "–", age_breaks[-1] - 1)
age_labels[length(age_labels)] <- "79+"

# Preprocess: calculate AGE, recode items, assign generation
wvs_generational <- wvsdf %>%
  filter(COUNTRY_ALPHA %in% c("KOR", "TWN", "MNG", "IDN", "PHL", "JPN")) %>%
  mutate(
    AGE = ifelse(!is.na(X003), X003, ifelse(!is.na(S020) & !is.na(X002), S020 - X002, NA)),
    AGE_BIN = cut(AGE, breaks = age_breaks, include.lowest = TRUE, right = FALSE, labels = age_labels),
    E114_rec = ifelse(E114 %in% c(1, 2), 1, 0),  # Strong Leader
    E115_rec = ifelse(E115 %in% c(1, 2), 1, 0),  # Experts Rule
    E116_rec = ifelse(E116 %in% c(1, 2), 1, 0),  # Army Rule
    E117_rec = ifelse(E117 %in% c(1, 2), 1, 0)   # Democracy
  ) %>%
  assign_generations() %>%
  filter(!is.na(Generation), !is.na(AGE), AGE >= 18, AGE <= 100)

# Compute support + CIs by generation and age bin
# === Step 1: Count sample sizes by COUNTRY × Generation × AGE_BIN ===
bin_counts <- wvs_generational %>%
  group_by(COUNTRY_ALPHA, Generation, AGE_BIN) %>%
  summarise(n = n(), .groups = "drop") %>%
  arrange(COUNTRY_ALPHA, Generation, AGE_BIN) %>%
  group_by(COUNTRY_ALPHA, Generation) %>%
  mutate(
    AGE_BIN_NEW = if_else(n < 10, dplyr::lag(AGE_BIN), AGE_BIN)
  ) %>%
  ungroup()

# === Step 2: Merge bin reassignment back into generational data ===
wvs_generational_collapsed <- wvs_generational %>%
  left_join(
    bin_counts %>% select(COUNTRY_ALPHA, Generation, AGE_BIN, AGE_BIN_NEW),
    by = c("COUNTRY_ALPHA", "Generation", "AGE_BIN")
  ) %>%
  mutate(AGE_BIN = AGE_BIN_NEW) %>%
  filter(!is.na(AGE_BIN))

# === Step 3: Compute weighted proportions + CIs ===
wvs_gen_summary <- wvs_generational_collapsed %>%
  group_by(COUNTRY_ALPHA, Generation, AGE_BIN) %>%
  summarise(
    n_dem = sum(!is.na(E117_rec)),
    n_dahl = sum(!is.na(E117_rec) & !is.na(E115_rec)),
    n_strong = sum(!is.na(E117_rec) & !is.na(E114_rec)),
    n_mil = sum(!is.na(E117_rec) & !is.na(E116_rec)),

    Democracy = mean(E117_rec, na.rm = TRUE),
    Dahlian = mean(E117_rec * E115_rec, na.rm = TRUE),
    Strongman = mean(E117_rec * E114_rec, na.rm = TRUE),
    Military = mean(E117_rec * E116_rec, na.rm = TRUE),

    se_dem = sqrt(Democracy * (1 - Democracy) / n_dem),
    se_dahl = sqrt(Dahlian * (1 - Dahlian) / n_dahl),
    se_strong = sqrt(Strongman * (1 - Strongman) / n_strong),
    se_mil = sqrt(Military * (1 - Military) / n_mil),
    .groups = "drop"
  ) %>%
  pivot_longer(
    cols = c("Democracy", "Dahlian", "Strongman", "Military"),
    names_to = "Measure",
    values_to = "Proportion"
  ) %>%
  mutate(
    se = case_when(
      Measure == "Democracy" ~ se_dem,
      Measure == "Dahlian" ~ se_dahl,
      Measure == "Strongman" ~ se_strong,
      Measure == "Military" ~ se_mil
    ),
    lower = pmax(Proportion - 1.96 * se, 0),
    upper = pmin(Proportion + 1.96 * se, 1),
    Measure = recode(Measure,
      "Democracy" = "Democracy Good",
      "Dahlian" = "Dahlian Guardianship",
      "Strongman" = "Strongman Guardianship",
      "Military" = "Military Guardianship"
    ),
    Measure = factor(Measure, levels = c(
      "Democracy Good", "Dahlian Guardianship", "Military Guardianship", "Strongman Guardianship"
    ))
  ) %>%
  filter(!is.na(Proportion), Proportion > 0, Proportion < 1)


# Plot colors and factor levels
generation_colors <- c(
  "Democratic" = "#e63946",
  "Transitional" = "#a8dadc",
  "Authoritarian" = "#1d3557"
)

wvs_gen_summary <- wvs_gen_summary %>%
  mutate(
    COUNTRY_ALPHA = factor(COUNTRY_ALPHA, levels = c("JPN", "PHL", "KOR", "TWN", "MNG", "IDN")),
    Generation = factor(Generation, levels = c("Democratic", "Transitional", "Authoritarian"))
  )

# Plot
gen_guardianship <- ggplot(wvs_gen_summary, aes(x = AGE_BIN, y = Proportion, color = Generation, group = Generation)) +
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = Generation), alpha = 0.2, color = NA) +
  geom_line(linewidth = 1.2, na.rm = TRUE) +
  geom_point(size = 1.5, na.rm = TRUE) +
  facet_grid(COUNTRY_ALPHA ~ Measure, scales = "fixed", space = "free") +
  scale_color_manual(values = generation_colors, breaks = names(generation_colors)) +
  scale_fill_manual(values = generation_colors, guide = "none") +
  scale_y_continuous(labels = scales::percent_format(accuracy = 1), limits = c(0, 1)) +
  labs(
    x = "Age at Time of Survey (5-year bins)",
    y = "Proportion Supporting",
    color = "Generation"
  ) +
  theme_light() +
  theme(
    strip.text = element_text(face = "bold"),
    axis.text.x = element_text(size = 7, angle = 45, hjust = 1),
    axis.text.y = element_text(size = 7),
    legend.position = "bottom",
    legend.title = element_blank(),
    panel.spacing.x = unit(c(1.25, 0.25, 0.25), "lines")
  )

#| label: fig-gen-plot
ggsave("figures/gen_guardianship.pdf", plot = gen_guardianship, device = "pdf", width = 12, height = 10, dpi = 300)


```

## Emancipative values

```{r}

### Emancipative values across democratic generations

# Define countries and democratic generations
countries <- c("KOR", "TWN", "JPN", "IDN", "MNG", "PHL") #"DEU", 

# Country code to name mapping (used throughout this section)
country_names <- tibble::tibble(
  COUNTRY_ALPHA = c("KOR", "TWN", "JPN", "IDN", "MNG", "PHL"), #"DEU", 
  Country_Name = c(
    "South Korea", "Taiwan", "Japan",
    "Indonesia", "Mongolia", "Philippines" #"Germany", 
  )
)

democratic_generations <- list(
  KOR = 1970:2023,  # Transition in 1987 → born ≥1970
  TWN = 1969:2023,  # Transition in 1987 → born ≥1969
  JPN = 1938:2023,  # Postwar constitution in 1946 → age 18 by 1956 → born ≥1938
  IDN = 1981:2023,  # Transition in 1998 → born ≥1981
  MNG = 1973:2023,  # Transition in 1991 → born ≥1973
  PHL = 1970:2023#,
  #DEU = 1938:2023   # Basic Law (1949) → age 18 by 1956 → born ≥1938
)

# Reload regime classification
vdem_classification <- vdem %>%
  filter(year == max(vdem$year, na.rm = TRUE)) %>%
  select(COUNTRY_ALPHA = country_text_id, v2x_regime)

# Filter and annotate democratic generation
wvs_eman <- wvsdf %>%
  filter(COUNTRY_ALPHA %in% countries) %>%
  mutate(
    AGE = ifelse(!is.na(X003), X003, ifelse(!is.na(S020) & !is.na(X002), S020 - X002, NA))
  ) %>%
  rowwise() %>%
  mutate(Democratic_Gen = case_when(
    COUNTRY_ALPHA == "KOR" & X002 %in% democratic_generations$KOR ~ TRUE,
    COUNTRY_ALPHA == "TWN" & X002 %in% democratic_generations$TWN ~ TRUE,
    COUNTRY_ALPHA == "JPN" & X002 %in% democratic_generations$JPN ~ TRUE,
    COUNTRY_ALPHA == "IDN" & X002 %in% democratic_generations$IDN ~ TRUE,
    COUNTRY_ALPHA == "MNG" & X002 %in% democratic_generations$MNG ~ TRUE,
    COUNTRY_ALPHA == "PHL" & X002 %in% democratic_generations$PHL ~ TRUE,
    #COUNTRY_ALPHA == "DEU" & X002 %in% democratic_generations$DEU ~ TRUE,
    TRUE ~ FALSE
  )) %>%
  ungroup() %>%
  filter(Democratic_Gen, AGE >= 18 & AGE <= 100) %>%
  mutate(
  AGE_BIN = cut(
    AGE,
    breaks = seq(18, 98, by = 5),
    include.lowest = TRUE,
    right = FALSE,
    labels = paste(seq(18, 93, by = 5), seq(22, 97, by = 5), sep = "–")
  )
)

# Summarize by AGE_BIN and COUNTRY
emancipation_averages <- wvs_eman %>%
  group_by(COUNTRY_ALPHA, AGE_BIN) %>%
  summarise(
    Avg_Emancipation = weighted.mean(Y020, w = S017, na.rm = TRUE),
    Respondents = sum(!is.na(Y020)),
    se = sqrt(Avg_Emancipation * (1 - Avg_Emancipation) / Respondents),
    lower = pmax(Avg_Emancipation - 1.96 * se, 0),
    upper = pmin(Avg_Emancipation + 1.96 * se, 1),
    .groups = "drop"
  ) %>%
  left_join(country_names, by = "COUNTRY_ALPHA") %>%
  mutate(
    Country_Name = factor(Country_Name, levels = c(
      "Japan", "Philippines", "South Korea", "Taiwan", "Mongolia", "Indonesia"#, "Germany"
    ))
  )

# Add numeric bin index for rolling logic
emancipation_averages <- emancipation_averages %>%
  mutate(BIN_INDEX = as.integer(factor(AGE_BIN, levels = unique(AGE_BIN))))

# Roll undersampled bins back
threshold <- 10

emancipation_rolled <- emancipation_averages %>%
  group_by(COUNTRY_ALPHA) %>%
  arrange(BIN_INDEX) %>%
  mutate(
    AGE_BIN_ROLLED = if_else(Respondents < threshold & BIN_INDEX > min(BIN_INDEX),
                             lag(AGE_BIN),
                             AGE_BIN)
  ) %>%
  ungroup()

# Re-aggregate using rolled bins
emancipation_final <- emancipation_rolled %>%
  group_by(COUNTRY_ALPHA, AGE_BIN_ROLLED) %>%
  summarise(
    Avg_Emancipation = weighted.mean(Avg_Emancipation, w = Respondents, na.rm = TRUE),
    Respondents = sum(Respondents, na.rm = TRUE),
    se = sqrt(Avg_Emancipation * (1 - Avg_Emancipation) / Respondents),
    lower = pmax(Avg_Emancipation - 1.96 * se, 0),
    upper = pmin(Avg_Emancipation + 1.96 * se, 1),
    .groups = "drop"
  ) %>%
  rename(AGE_BIN = AGE_BIN_ROLLED) %>%
  left_join(country_names, by = "COUNTRY_ALPHA")

# Determine emancipation averages as per regime type (V-dem)
regime_labels <- c(
  "Closed Autocracy", "Electoral Autocracy", "Electoral Democracy", "Liberal Democracy"
)

# Define color palette
color_palette_eman <- c(
  "South Korea" = "#e63946",
  "Taiwan"      = "#457b9d",
  "Indonesia"   = "#f4a261",
  "Mongolia"    = "#2a9d8f",
  "Philippines" = "#ffca3a",
  "Japan"       = "#f3722c"#,  
  #"Germany"     = "#984EA3"
)

# Full plot code: Emancipative values with interpretive thresholds and regime averages

# Combine Closed + Electoral Autocracy into one category
regime_averages_clean <- wvsdf %>%
  filter(!is.na(Y020)) %>%
  left_join(vdem_classification, by = "COUNTRY_ALPHA") %>%
  filter(!is.na(v2x_regime)) %>%
  mutate(Regime_Group = case_when(
    v2x_regime %in% c(0, 1) ~ "Autocracy (Closed + Electoral)",
    v2x_regime == 2 ~ "Electoral Democracy",
    v2x_regime == 3 ~ "Liberal Democracy"
  )) %>%
  group_by(Regime_Group) %>%
  summarise(
    Avg_Eman = weighted.mean(Y020, w = S017, na.rm = TRUE),
    .groups = "drop"
  )

# Extract regime average y values
libdem_y <- regime_averages_clean %>% filter(Regime_Group == "Liberal Democracy") %>% pull(Avg_Eman)
electdem_y <- regime_averages_clean %>% filter(Regime_Group == "Electoral Democracy") %>% pull(Avg_Eman)
autocracy_y <- regime_averages_clean %>% filter(Regime_Group == "Autocracy (Closed + Electoral)") %>% pull(Avg_Eman)
yvals <- sort(c(autocracy_y, electdem_y, libdem_y))

# X position anchor for regime labels (adjust if needed)
label_x <- 10  # around the "68–72" bin

# Plot with legend order in mind
emancipation_averages <- emancipation_averages %>%
  left_join(country_names, by = "COUNTRY_ALPHA") %>%
  mutate(
    Country_Name = factor(Country_Name, levels = c(
      "Japan", "Philippines", "South Korea", "Taiwan", "Mongolia", "Indonesia"#, "Germany"
    ))
  )


emancipation_plot <- ggplot(emancipation_final,
                            aes(x = AGE_BIN, y = Avg_Emancipation, group = Country_Name, color = Country_Name)) +
  # Confidence ribbons first
  geom_ribbon(aes(ymin = lower, ymax = upper, fill = Country_Name),
              alpha = 0.2, color = NA, show.legend = FALSE) +
  # Shaded regime zones
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = yvals[1], ymax = yvals[2],
           alpha = 0.08, fill = "white") +
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = yvals[2], ymax = yvals[3],
           alpha = 0.13, fill = "white") +
  annotate("rect", xmin = -Inf, xmax = Inf, ymin = yvals[3],
           ymax = max(emancipation_averages$Avg_Emancipation, na.rm = TRUE),
           alpha = 0.08, fill = "white") +
  # Trend lines and points
  geom_line(size = 1.2) +
  geom_point(size = 2) +
  # Regime benchmarks
  geom_hline(yintercept = autocracy_y, linetype = "dotted", color = "gray30", size = 0.5) +
  geom_hline(yintercept = electdem_y, linetype = "dotted", color = "gray30", size = 0.5) +
  geom_hline(yintercept = libdem_y, linetype = "dotted", color = "gray30", size = 0.5) +
  # Regime labels
  annotate("text", x = label_x, y = libdem_y + 0.01,
           label = paste0("Liberal Democracies (avg: ", round(libdem_y, 2), ")"),
           hjust = 0, size = 3.5, color = "gray20") +
  annotate("text", x = label_x, y = electdem_y + 0.01,
           label = paste0("Electoral Democracies (avg: ", round(electdem_y, 2), ")"),
           hjust = 0, size = 3.5, color = "gray20") +
  annotate("text", x = label_x, y = autocracy_y + 0.01,
           label = paste0("Autocracies (Electoral + Closed) (avg: ", round(autocracy_y, 2), ")"),
           hjust = 0, size = 3.5, color = "gray20") +
  # Scales and theme
  scale_color_manual(values = color_palette_eman) +
  scale_fill_manual(values = color_palette_eman) +
  coord_cartesian(ylim = c(0.2, 0.8)) +
  labs(
    x = "Age at Time of Survey (5-year bins)",
    y = "Emancipative Values Index",
    color = NULL
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.title.x = element_text(size = 10),
    axis.title.y = element_text(size = 10),
    legend.title = element_text(size = 10),
    legend.text = element_text(size = 8)
  )

#| label: fig-gen-eman-plot
ggsave("figures/democratic_generations_emancipation_plot.pdf", plot = emancipation_plot, device = "pdf", width = 10, height = 7, dpi = 300)


```

### EVI x generations

```{r}

# Packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(survey)
library(forcats)
library(tibble)

# 1) Countries of interest and pretty names
countries <- c("KOR", "TWN", "JPN", "IDN", "MNG", "PHL")

country_names <- tribble(
  ~COUNTRY_ALPHA, ~Country_Name,
  "JPN", "Japan",
  "PHL", "Philippines",
  "KOR", "South Korea",
  "TWN", "Taiwan",
  "MNG", "Mongolia",
  "IDN", "Indonesia"
)

# 2) Cohort boundaries by birth year (from your manuscript table)
#    Authoritarian = born <= cutoff_A
#    Transitional  = born in [start_T, end_T]
#    Democratic    = born >= cutoff_D
cohort_rules <- tribble(
  ~COUNTRY_ALPHA, ~cutoff_A, ~start_T, ~end_T, ~cutoff_D,
  "KOR", 1959, 1960, 1969, 1970,   # transition 1987
  "TWN", 1953, 1954, 1968, 1969,   # transition 1991
  "JPN", 1930, 1931, 1937, 1938,   # democratic by 1956
  "IDN", 1960, 1961, 1980, 1981,   # transition 1998
  "MNG", 1972, 1973, 1992, 1993,   # transition 1992
  "PHL", 1960, 1961, 1969, 1970    # transition 1986
)

# 3) Prep: age and birth year, filter to countries and valid ages
wvs_prepped <- wvsdf %>%
  filter(COUNTRY_ALPHA %in% countries) %>%
  mutate(
    AGE = dplyr::coalesce(X003, ifelse(!is.na(S020) & !is.na(X002), S020 - X002, NA_real_)),
    BIRTH_YEAR = X002
  ) %>%
  filter(!is.na(Y020), !is.na(S017), !is.na(BIRTH_YEAR), !is.na(AGE), AGE >= 18, AGE <= 100) %>%
  left_join(cohort_rules, by = "COUNTRY_ALPHA") %>%
  mutate(
    Cohort = case_when(
      BIRTH_YEAR <= cutoff_A ~ "Authoritarian",
      BIRTH_YEAR >= cutoff_D ~ "Democratic",
      BIRTH_YEAR >= start_T & BIRTH_YEAR <= end_T ~ "Transitional",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(Cohort)) %>%
  left_join(country_names, by = "COUNTRY_ALPHA") %>%
  mutate(
    Country_Name = factor(Country_Name,
                          levels = c("Japan", "Philippines", "South Korea", "Taiwan", "Mongolia", "Indonesia")),
    Cohort = factor(Cohort, levels = c("Democratic", "Transitional", "Authoritarian"))
  )

# 4) Survey design for proper weighted means and SEs
#    Note: WVS has complex designs, but if PSUs/strata are unavailable,
#    we use weights-only design. This is conservative and transparent.
des <- svydesign(ids = ~1, weights = ~S017, data = wvs_prepped)

# 5) Weighted means and standard errors of EVI by Country x Cohort
evi_summary <- svyby(
  ~Y020, by = ~Country_Name + Cohort, design = des,
  FUN = svymean, na.rm = TRUE, vartype = c("se", "ci"), level = 0.95
) %>%
  as_tibble() %>%
  rename(Mean_EVI = Y020, SE = se, CI_low = ci_l, CI_high = ci_u) %>%
  arrange(Country_Name, Cohort)

# Optional: count unweighted and weighted n for transparency
n_counts <- wvs_prepped %>%
  group_by(Country_Name, Cohort) %>%
  summarise(
    n_unw = n(),
    w_sum = sum(S017, na.rm = TRUE),
    .groups = "drop"
  )

evi_summary <- evi_summary %>% left_join(n_counts, by = c("Country_Name", "Cohort"))

# 6) Plot: grouped bars with 95% CIs
palette_cohorts <- c(
  "Democratic" = "#3b82f6",
  "Transitional" = "#a78bfa",
  "Authoritarian" = "#94a3b8"
)

p_bars <- ggplot(evi_summary,
                 aes(x = Country_Name, y = Mean_EVI, fill = Cohort)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.75, color = "white") +
  geom_errorbar(aes(ymin = CI_low, ymax = CI_high),
                position = position_dodge(width = 0.8), width = 0.15, linewidth = 0.5) +
  scale_fill_manual(values = palette_cohorts, guide = guide_legend(reverse = FALSE)) +
  labs(
    x = NULL,
    y = "Emancipative Values Index (weighted mean)",
    fill = NULL,
    title = "Emancipative values by cohort and country",
    subtitle = "Three cohorts per country in fixed order: Democratic, Transitional, Authoritarian",
    caption = "World Values Survey pooled waves. Means weighted by S017. Cohorts defined by birth year relative to each country's transition."
  ) +
  coord_cartesian(ylim = c(0, 1)) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(face = "bold")
  )



```

### Confidence x generations

```{r}

# Packages
library(dplyr)
library(tidyr)
library(ggplot2)
library(survey)
library(forcats)
library(tibble)
library(purrr)

# Countries and nice names
countries <- c("KOR","TWN","JPN","IDN","MNG","PHL")
country_names <- tribble(
  ~COUNTRY_ALPHA, ~Country_Name,
  "JPN","Japan",
  "PHL","Philippines",
  "KOR","South Korea",
  "TWN","Taiwan",
  "MNG","Mongolia",
  "IDN","Indonesia"
)

# Cohort boundaries by birth year
cohort_rules <- tribble(
  ~COUNTRY_ALPHA, ~cutoff_A, ~start_T, ~end_T, ~cutoff_D,
  "KOR", 1959, 1960, 1969, 1970,
  "TWN", 1953, 1954, 1968, 1969,
  "JPN", 1930, 1931, 1937, 1938,
  "IDN", 1960, 1961, 1980, 1981,
  "MNG", 1972, 1973, 1992, 1993,
  "PHL", 1960, 1961, 1969, 1970
)

# Core institutional confidence items from E069 battery
# Parliament, Parties, Government, Civil service, Courts, Elections
ici_items_core <- c("E069_07","E069_12","E069_11","E069_08","E069_17","E069_64")

# Gov only: Parliament, Parties, Government
ici_items_gov<- c("E069_07","E069_12","E069_11")

# Optional armed forces item for a tutelary index variant
ici_item_military <- "E069_02"

# Keep only variables present in the data
available_core <- ici_items_core[ici_items_core %in% names(wvsdf)]
stopifnot(length(available_core) >= 3)

# Prep respondent level data
wvs_prepped <- wvsdf %>%
  filter(COUNTRY_ALPHA %in% countries) %>%
  mutate(
    AGE = dplyr::coalesce(X003, ifelse(!is.na(S020) & !is.na(X002), S020 - X002, NA_real_)),
    BIRTH_YEAR = X002,
    WAVE = S002VS
  ) %>%
  filter(!is.na(S017), !is.na(BIRTH_YEAR), !is.na(AGE), AGE >= 18, AGE <= 100) %>%
  left_join(cohort_rules, by = "COUNTRY_ALPHA") %>%
  mutate(
    Cohort = case_when(
      BIRTH_YEAR <= cutoff_A ~ "Authoritarian",
      BIRTH_YEAR >= cutoff_D ~ "Democratic",
      BIRTH_YEAR >= start_T & BIRTH_YEAR <= end_T ~ "Transitional",
      TRUE ~ NA_character_
    )
  ) %>%
  filter(!is.na(Cohort)) %>%
  left_join(country_names, by = "COUNTRY_ALPHA") %>%
  mutate(
    Country_Name = factor(Country_Name,
                          levels = c("Japan","Philippines","South Korea","Taiwan","Mongolia","Indonesia")),
    Cohort = factor(Cohort, levels = c("Democratic","Transitional","Authoritarian"))
  )

# Reverse code and scale: 1 great deal ... 4 none at all  -> 1 ... 0
rev01 <- function(x) ifelse(x %in% 1:4, (5 - x) / 3, NA_real_)

wvs_prepped <- wvs_prepped %>%
  mutate(across(all_of(available_core), rev01)) %>%
  rowwise() %>%
  mutate(
    ICI = ifelse(all(is.na(c_across(all_of(available_core)))), NA_real_,
                 mean(c_across(all_of(available_core)), na.rm = TRUE))
  ) %>%
  ungroup() %>%
  filter(!is.na(ICI))

# Helper for weighted mean with CI
svy_mean_ci <- function(dat, value, weight) {
  des <- svydesign(ids = ~1, weights = as.formula(paste0("~", weight)), data = dat)
  est <- svymean(as.formula(paste0("~", value)), des, na.rm = TRUE)
  ci <- confint(est)
  tibble(
    Mean = as.numeric(est),
    SE = as.numeric(SE(est)),
    CI_low = ci[1, 1],
    CI_high = ci[1, 2],
    n_unw = nrow(dat),
    w_sum = sum(dat[[weight]], na.rm = TRUE)
  )
}

# Estimate within country x wave x cohort
cell_estimates <- wvs_prepped %>%
  group_by(Country_Name, COUNTRY_ALPHA, WAVE, Cohort) %>%
  group_modify(~ svy_mean_ci(.x, value = "ICI", weight = "S017")) %>%
  ungroup()

# Pool to country x cohort by weighting cell means with cell weights
pooled_estimates <- cell_estimates %>%
  group_by(Country_Name, COUNTRY_ALPHA, Cohort) %>%
  summarise(
    Mean_ICI = sum(Mean * w_sum, na.rm = TRUE) / sum(w_sum, na.rm = TRUE),
    SE_ICI = sqrt(sum((SE^2 + (Mean - (sum(Mean * w_sum) / sum(w_sum)))^2) *
                        (w_sum / sum(w_sum))^2, na.rm = TRUE)),
    n_unw = sum(n_unw, na.rm = TRUE),
    w_sum = sum(w_sum, na.rm = TRUE),
    .groups = "drop"
  ) %>%
  mutate(
    CI_low = pmax(Mean_ICI - 1.96 * SE_ICI, 0),
    CI_high = pmin(Mean_ICI + 1.96 * SE_ICI, 1)
  ) %>%
  arrange(Country_Name, Cohort)

# Plot
palette_cohorts <- c("Democratic"="#3b82f6","Transitional"="#a78bfa","Authoritarian"="#94a3b8")

p_ici <- ggplot(pooled_estimates,
                aes(x = Country_Name, y = Mean_ICI, fill = Cohort)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.75, color = "white") +
  geom_errorbar(aes(ymin = CI_low, ymax = CI_high),
                position = position_dodge(width = 0.8), width = 0.15, linewidth = 0.5) +
  scale_fill_manual(values = palette_cohorts) +
  coord_cartesian(ylim = c(0.5, 1)) +
  labs(
    x = NULL,
    y = "Institutional Confidence Index, 0 to 1, higher is more confidence",
    fill = NULL,
    title = "Institutional confidence by cohort and country",
    subtitle = "Within country by wave by cohort estimates pooled to country by cohort using survey weights",
    caption = "WVS Time Series 1981 to 2022. Items: E069_07 Parliament, E069_12 Parties, E069_11 Government, E069_08 Civil service, E069_17 Courts, E069_64 Elections. Responses recoded so higher means more confidence."
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(face = "bold")
  )

dir.create("figures", showWarnings = FALSE)
ggsave("figures/ici_by_cohort_country.pdf", p_ici, width = 9.5, height = 6.5, device = cairo_pdf)

# Quick country specific gaps for Korea and Taiwan
gap_fun <- function(df_country) {
  df_country <- df_country %>% mutate(Cohort_re = relevel(Cohort, ref = "Authoritarian"))
  des_c <- svydesign(ids = ~1, weights = ~S017, data = df_country)
  fit <- svyglm(ICI ~ Cohort_re, design = des_c)
  est <- summary(fit)$coefficients
  tibble(
    Country_Name = unique(df_country$Country_Name),
    Gap_Dem_vs_Auth = est["Cohort_reDemocratic", "Estimate"],
    SE = est["Cohort_reDemocratic", "Std. Error"],
    CI_low = Gap_Dem_vs_Auth - 1.96 * SE,
    CI_high = Gap_Dem_vs_Auth + 1.96 * SE
  )
}

gap_table_ici <- wvs_prepped %>%
  filter(COUNTRY_ALPHA %in% c("KOR","TWN")) %>%
  group_by(Country_Name) %>%
  group_modify(~ gap_fun(.x)) %>%
  ungroup()

print(pooled_estimates)
print(gap_table_ici)


# ---------------------------
# Significance testing
# ---------------------------

library(survey)

# Function: estimate Democratic vs Authoritarian gap in ICI
gap_fun <- function(df_country) {
  df_country <- df_country %>% 
    mutate(Cohort = relevel(Cohort, ref = "Authoritarian"))
  
  des_c <- svydesign(ids = ~1, weights = ~S017, data = df_country)
  fit <- svyglm(ICI ~ Cohort, design = des_c)
  est <- summary(fit)$coefficients
  
  tibble(
    Country_Name = unique(df_country$Country_Name),
    Gap_Dem_vs_Auth = est["CohortDemocratic", "Estimate"],
    SE = est["CohortDemocratic", "Std. Error"],
    CI_low = Gap_Dem_vs_Auth - 1.96 * SE,
    CI_high = Gap_Dem_vs_Auth + 1.96 * SE,
    p_value = est["CohortDemocratic", "Pr(>|t|)"]
  )
}

# Run for Korea and Taiwan (or all countries if you like)
gap_table <- wvs_prepped %>%
  #filter(COUNTRY_ALPHA %in% c("KOR","TWN")) %>%
  group_by(Country_Name) %>%
  group_modify(~ gap_fun(.x)) %>%
  ungroup()

gap_table <- gap_table %>%
  mutate(sig_95 = ifelse(CI_low > 0 | CI_high < 0, "yes", "no"))


print(gap_table)



# ----------------------------
# Wave-balanced pooling
# ----------------------------

# Step A: Compute weighted mean within each country × wave × cohort cell (same as before)
cell_estimates <- wvs_prepped %>%
  group_by(Country_Name, COUNTRY_ALPHA, WAVE, Cohort) %>%
  group_modify(~ svy_mean_ci(.x, value = "ICI", weight = "S017")) %>%
  ungroup()

# Step B: Pool across waves with equal weight per wave (not weighted by sample size)
pooled_estimates_wavebalanced <- cell_estimates %>%
  group_by(Country_Name, COUNTRY_ALPHA, Cohort) %>%
  summarise(
    Mean_ICI = mean(Mean, na.rm = TRUE),
    SE_ICI   = sqrt(mean(SE^2, na.rm = TRUE) + var(Mean, na.rm = TRUE)), # rough conservative combo
    n_cells  = n(),
    .groups = "drop"
  ) %>%
  mutate(
    CI_low = pmax(Mean_ICI - 1.96 * SE_ICI, 0),
    CI_high = pmin(Mean_ICI + 1.96 * SE_ICI, 1)
  ) %>%
  arrange(Country_Name, Cohort)

# ----------------------------
# Plot (wave-balanced)
# ----------------------------
p_ici_bal <- ggplot(pooled_estimates_wavebalanced,
                aes(x = Country_Name, y = Mean_ICI, fill = Cohort)) +
  geom_col(position = position_dodge(width = 0.8), width = 0.75, color = "white") +
  geom_errorbar(aes(ymin = CI_low, ymax = CI_high),
                position = position_dodge(width = 0.8), width = 0.15, linewidth = 0.5) +
  scale_fill_manual(values = palette_cohorts) +
  coord_cartesian(ylim = c(0, 1)) +
  labs(
    x = NULL,
    y = "Institutional Confidence Index (0–1, higher = more confidence)",
    fill = NULL,
    title = "Institutional confidence by cohort and country (wave-balanced)",
    subtitle = "Each wave contributes equally; within-wave estimates weighted by S017",
    caption = "World Values Survey pooled waves. ICI built from E069 items. Wave-balanced aggregation."
  ) +
  theme_minimal(base_size = 12) +
  theme(
    legend.position = "bottom",
    panel.grid.minor = element_blank(),
    axis.text.x = element_text(size = 11),
    plot.title = element_text(face = "bold")
  )

ggsave("figures/ici_by_cohort_country_wavebalanced.pdf",
       p_ici_bal, width = 9.5, height = 6.5, device = cairo_pdf)

# ----------------------------
# Compare pooled vs wave-balanced
# ----------------------------
print(pooled_estimates)                 # respondent-weighted pooled
print(pooled_estimates_wavebalanced)    # wave-balanced


```

